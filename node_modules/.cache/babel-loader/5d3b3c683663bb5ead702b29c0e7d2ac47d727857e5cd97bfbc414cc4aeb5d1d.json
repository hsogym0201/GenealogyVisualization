{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"world-cloud-3d\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"world-cloud-canvas-wrapper\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"world-cloud-canvas\",\n    width: \"800\",\n    height: \"400\",\n    style: {\n      \"width\": \"100%\",\n      \"max-width\": \"600px\"\n    }\n  })], -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    style: {\n      \"display\": \"none\"\n    },\n    id: \"weightTags\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 弹窗组件 \"), _ctx.hoveredWord ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"tooltip\",\n    style: _normalizeStyle(_ctx.tooltipStyle)\n  }, _toDisplayString(_ctx.hoveredWord.name) + \" - \" + _toDisplayString(_ctx.hoveredWord.info || 'No info available'), 5 /* TEXT, STYLE */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","width","height","style","_createCommentVNode","_ctx","hoveredWord","key","_normalizeStyle","tooltipStyle","name","_toDisplayString","info"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\components\\CiYun.vue"],"sourcesContent":["<template>\r\n  <div class=\"world-cloud-3d\">\r\n    <div class=\"world-cloud-canvas-wrapper\">\r\n      <canvas\r\n          id=\"world-cloud-canvas\"\r\n          width=\"800\"\r\n          height=\"400\"\r\n          style=\"width: 100%; max-width: 600px\"\r\n      ></canvas>\r\n    </div>\r\n    <div style=\"display: none\" id=\"weightTags\"></div>\r\n    <!-- 弹窗组件 -->\r\n    <div v-if=\"hoveredWord\" class=\"tooltip\" :style=\"tooltipStyle\">\r\n      {{ hoveredWord.name }} - {{ hoveredWord.info || 'No info available' }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      hoveredWord: null, // 当前悬停的词\r\n      tooltipStyle: { top: '0px', left: '0px' } // 弹窗的位置\r\n    };\r\n  },\r\n  props: {\r\n    wordArr: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n  },\r\n  methods: {\r\n    // 启动词云\r\n    startWorldCloud: function (updateFlag) {\r\n      this.createTagListDom();\r\n      let o = {\r\n        maxSpeed: 0.01,\r\n        minSpeed: 0.01,\r\n        textHeight: 25,\r\n        outlineMethod: \"colour\",\r\n        fadeIn: 800,\r\n        outlineColour: \"#fff456aa\",\r\n        outlineOffset: 0,\r\n        depth: 0.97,\r\n        minBrightness: 0.2,\r\n        wheelZoom: false,\r\n        reverse: true,\r\n        shadowBlur: 2,\r\n        shuffleTags: true,\r\n        shadowOffset: [1, 1],\r\n        stretchX: 2, // 水平方向更大\r\n        stretchY: 1, // 垂直方向更大\r\n        initial: [0.1, 0.1],\r\n        textFont: null,\r\n        textColour: null,\r\n        weight: true,\r\n        weightMode: \"size\",\r\n        weightSize: 1,\r\n      };\r\n      try {\r\n        // 如果不是更新，说明是第一次渲染，就启动 tagcanvas, 否则就代表更新\r\n        if (!updateFlag) {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Start(\"world-cloud-canvas\", \"weightTags\", o);\r\n        } else {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Update(\"world-cloud-canvas\");\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    // 根据父组件传过来的 wordArr 创建 TagList Dom列表，放到页面中供，canvas 渲染\r\n    createTagListDom: function () {\r\n      let res = [...this.wordArr];\r\n      let fragment = new DocumentFragment();\r\n      for (let i = 0; i < res.length; i++) {\r\n        let a = document.createElement(\"a\");\r\n        // 字符串长度大于10就要换行\r\n        if (res[i].name.length > 10) {\r\n          let charArr = res[i].name.split(\"\");\r\n          charArr.splice(10, 0, \"<br>\");\r\n          res[i].name = charArr.join(\"\");\r\n        }\r\n        a.innerHTML = res[i].name;\r\n        a.href = \"javascript:void(0)\";\r\n\r\n        //数据前十名/数据10-20/数据20-30\r\n        if (res[i].light === \"large\") {\r\n          a.className = \"large\";\r\n        } else if (res[i].light === \"medium\") {\r\n          a.className = \"medium\";\r\n        } else if (res[i].light === \"small\") {\r\n          a.className = \"small\";\r\n        }\r\n\r\n        // 为每个词添加点击事件\r\n        a.addEventListener(\"click\", () => {\r\n          this.$emit(\"word-clicked\", res[i]);\r\n        });\r\n\r\n        // 为每个词添加鼠标悬停事件\r\n        a.addEventListener(\"mousemove\", (event) => {\r\n          console.log(\"Hovered Word:\", res[i]); // 调试输出\r\n          this.hoveredWord = res[i];\r\n          this.tooltipStyle = {\r\n            top: `${event.clientY + 20}px`, // 增加偏移量\r\n            left: `${event.clientX + 20}px`\r\n          };\r\n        });\r\n\r\n        // 鼠标移出时隐藏弹窗\r\n        a.addEventListener(\"mouseout\", () => {\r\n          this.hoveredWord = null;\r\n        });\r\n\r\n        fragment.append(a);\r\n      }\r\n      // 更新 tagContainer中的 tag元素\r\n      let tagsContainer = document.querySelector(\"#weightTags\");\r\n      tagsContainer.innerHTML = \"\";\r\n      tagsContainer.append(fragment);\r\n    }\r\n  },\r\n  watch: {\r\n    // 如果词云发生变化就要 重绘 tagcanvas\r\n    wordArr: function () {\r\n      this.startWorldCloud(true);\r\n    },\r\n  },\r\n  mounted() {\r\n    // 组件装载成果 绘制 tagcanvas\r\n    this.startWorldCloud();\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.world-cloud-3d {\r\n  .world-cloud-canvas-wrapper {\r\n    width: 600px;\r\n    height: 400px;\r\n    max-width: 600px;\r\n    max-height: 400px;\r\n    overflow: visible;\r\n    padding: 20px;\r\n  }\r\n  #weightTags {\r\n    font-size: 12px;\r\n    .large {\r\n      font-size: 70px;\r\n      color: #E64A19;\r\n    }\r\n    .medium {\r\n      font-size: 55px;\r\n      color: #e4ae77;\r\n    }\r\n    .small {\r\n      font-size: 35px;\r\n      color: #FFAB40;\r\n    }\r\n  }\r\n  // 弹窗样式\r\n  .tooltip {\r\n    position: fixed;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    color: white;\r\n    padding: 5px 10px;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n    z-index: 1000;\r\n    pointer-events: none;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAcM,OAdNC,UAcM,G,0BAbJC,mBAAA,CAOM;IAPDH,KAAK,EAAC;EAA4B,IACrCG,mBAAA,CAKU;IAJNC,EAAE,EAAC,oBAAoB;IACvBC,KAAK,EAAC,KAAK;IACXC,MAAM,EAAC,KAAK;IACZC,KAAqC,EAArC;MAAA;MAAA;IAAA;qDAGNJ,mBAAA,CAAiD;IAA5CI,KAAqB,EAArB;MAAA;IAAA,CAAqB;IAACH,EAAE,EAAC;+BAC9BI,mBAAA,UAAa,EACFC,IAAA,CAAAC,WAAW,I,cAAtBT,mBAAA,CAEM;IAdVU,GAAA;IAY4BX,KAAK,EAAC,SAAS;IAAEO,KAAK,EAZlDK,eAAA,CAYoDH,IAAA,CAAAI,YAAY;sBACvDJ,IAAA,CAAAC,WAAW,CAACI,IAAI,IAAG,KAAG,GAAAC,gBAAA,CAAGN,IAAA,CAAAC,WAAW,CAACM,IAAI,kDAblDR,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}