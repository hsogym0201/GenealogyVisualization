{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as echarts from \"echarts/core\";\nimport { SankeyChart } from \"echarts/charts\";\nimport { TitleComponent, TooltipComponent } from \"echarts/components\";\nimport { CanvasRenderer } from \"echarts/renderers\";\n\n// 注册必要的组件\necharts.use([SankeyChart, TitleComponent, TooltipComponent, CanvasRenderer]);\nexport default {\n  name: \"SangJiTu\",\n  props: {\n    sankeyData: Object // 从父组件传递过来的桑基图数据\n  },\n  watch: {\n    sankeyData(newData) {\n      if (newData && newData.nodes.length > 0) {\n        this.updateChart(newData); // 当数据变化时更新桑基图\n      }\n    }\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      const chartDom = document.getElementById(\"SangJiTU\");\n      this.myChart = echarts.init(chartDom);\n    },\n    // 更新桑基图\n    updateChart(sankeyData) {\n      const option = {\n        tooltip: {\n          trigger: \"item\",\n          formatter: params => {\n            if (params.dataType === \"node\") {\n              return `地点: ${params.name}<br>类别: ${params.data.category}`;\n            }\n            return `从: ${params.data.source}<br>到: ${params.data.target}<br>值: ${params.data.value}`;\n          }\n        },\n        series: [{\n          type: \"sankey\",\n          layout: \"none\",\n          // 禁用自动布局\n          data: sankeyData.nodes,\n          links: sankeyData.links,\n          emphasis: {\n            focus: \"adjacency\"\n          },\n          layoutIterations: 64,\n          // 增加布局优化次数\n          nodeAlign: \"justify\",\n          // 节点左对齐\n          levels: [{\n            depth: 0,\n            itemStyle: {\n              color: \"#e1d5e7\"\n            }\n          },\n          // 第一列\n          {\n            depth: 1,\n            itemStyle: {\n              color: \"#d5e8d4\"\n            }\n          },\n          // 第二列\n          {\n            depth: 2,\n            itemStyle: {\n              color: \"#dae8fc\"\n            }\n          },\n          // 第三列\n          {\n            depth: 3,\n            itemStyle: {\n              color: \"#ffe6cc\"\n            }\n          } // 第四列\n          ],\n          lineStyle: {\n            color: \"source\",\n            opacity: 0.6\n          }\n        }],\n        graphic: [\n        // 计算每列的宽度并设置色块和标题的位置\n        ...this.createColumnGraphics(sankeyData)]\n      };\n      this.myChart.setOption(option);\n    },\n    // 根据桑基图数据动态创建色块和标题\n    createColumnGraphics(sankeyData) {\n      const graphics = [];\n      const nodeWidth = 100; // 假设每列的宽度为100（根据实际情况调整）\n\n      // 创建每一列的色块和标题\n      sankeyData.nodes.forEach(node => {\n        const level = node.level; // 获取节点所在的层级（列）\n        if (!graphics[level]) {\n          graphics[level] = [];\n        }\n\n        // 计算每列的标题位置（假设每列的节点宽度一致）\n        const leftPosition = level * (nodeWidth + 20); // 适当的水平偏移量，确保色块和标题对齐\n\n        // 添加色块\n        graphics[level].push({\n          type: \"rect\",\n          left: `${leftPosition}%`,\n          // 设置为百分比，确保色块位置相对准确\n          top: \"3%\",\n          shape: {\n            width: 20,\n            height: 20\n          },\n          style: {\n            fill: this.getColumnColor(level)\n          }\n        });\n\n        // 添加标题\n        graphics[level].push({\n          type: \"text\",\n          left: `${leftPosition}%`,\n          top: \"10%\",\n          style: {\n            text: this.getColumnTitle(level),\n            fontSize: 16,\n            fontWeight: \"bold\"\n          }\n        });\n      });\n      return graphics.flat(); // 将图形数组扁平化\n    },\n    // 获取每列的颜色\n    getColumnColor(level) {\n      const colors = [\"#e1d5e7\", \"#d5e8d4\", \"#dae8fc\", \"#ffe6cc\"];\n      return colors[level] || \"#ffffff\"; // 如果没有匹配颜色，使用白色\n    },\n    // 获取每列的标题\n    getColumnTitle(level) {\n      const titles = [\"第一列\", \"第二列\", \"第三列\", \"第四列\"];\n      return titles[level] || `列 ${level + 1}`;\n    }\n  }\n};","map":{"version":3,"names":["echarts","SankeyChart","TitleComponent","TooltipComponent","CanvasRenderer","use","name","props","sankeyData","Object","watch","newData","nodes","length","updateChart","mounted","initChart","methods","chartDom","document","getElementById","myChart","init","option","tooltip","trigger","formatter","params","dataType","data","category","source","target","value","series","type","layout","links","emphasis","focus","layoutIterations","nodeAlign","levels","depth","itemStyle","color","lineStyle","opacity","graphic","createColumnGraphics","setOption","graphics","nodeWidth","forEach","node","level","leftPosition","push","left","top","shape","width","height","style","fill","getColumnColor","text","getColumnTitle","fontSize","fontWeight","flat","colors","titles"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\components\\SangJiTu.vue"],"sourcesContent":["<template>\r\n  <div class=\"SangJiTu\">\r\n    <div id=\"SangJiTU\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from \"echarts/core\";\r\nimport { SankeyChart } from \"echarts/charts\";\r\nimport { TitleComponent, TooltipComponent } from \"echarts/components\";\r\nimport { CanvasRenderer } from \"echarts/renderers\";\r\n\r\n// 注册必要的组件\r\necharts.use([SankeyChart, TitleComponent, TooltipComponent, CanvasRenderer]);\r\n\r\nexport default {\r\n  name: \"SangJiTu\",\r\n  props: {\r\n    sankeyData: Object, // 从父组件传递过来的桑基图数据\r\n  },\r\n  watch: {\r\n    sankeyData(newData) {\r\n      if (newData && newData.nodes.length > 0) {\r\n        this.updateChart(newData); // 当数据变化时更新桑基图\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      const chartDom = document.getElementById(\"SangJiTU\");\r\n      this.myChart = echarts.init(chartDom);\r\n    },\r\n\r\n    // 更新桑基图\r\n    updateChart(sankeyData) {\r\n      const option = {\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: params => {\r\n            if (params.dataType === \"node\") {\r\n              return `地点: ${params.name}<br>类别: ${params.data.category}`;\r\n            }\r\n            return `从: ${params.data.source}<br>到: ${params.data.target}<br>值: ${params.data.value}`;\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"sankey\",\r\n            layout: \"none\", // 禁用自动布局\r\n            data: sankeyData.nodes,\r\n            links: sankeyData.links,\r\n            emphasis: {\r\n              focus: \"adjacency\",\r\n            },\r\n            layoutIterations: 64, // 增加布局优化次数\r\n            nodeAlign: \"justify\", // 节点左对齐\r\n            levels: [\r\n              { depth: 0, itemStyle: { color: \"#e1d5e7\" } }, // 第一列\r\n              { depth: 1, itemStyle: { color: \"#d5e8d4\" } }, // 第二列\r\n              { depth: 2, itemStyle: { color: \"#dae8fc\" } }, // 第三列\r\n              { depth: 3, itemStyle: { color: \"#ffe6cc\" } }, // 第四列\r\n            ],\r\n            lineStyle: {\r\n              color: \"source\",\r\n              opacity: 0.6,\r\n            },\r\n          },\r\n        ],\r\n        graphic: [\r\n          // 计算每列的宽度并设置色块和标题的位置\r\n          ...this.createColumnGraphics(sankeyData),\r\n        ],\r\n      };\r\n\r\n      this.myChart.setOption(option);\r\n    },\r\n\r\n    // 根据桑基图数据动态创建色块和标题\r\n    createColumnGraphics(sankeyData) {\r\n      const graphics = [];\r\n      const nodeWidth = 100; // 假设每列的宽度为100（根据实际情况调整）\r\n\r\n      // 创建每一列的色块和标题\r\n      sankeyData.nodes.forEach((node) => {\r\n        const level = node.level; // 获取节点所在的层级（列）\r\n        if (!graphics[level]) {\r\n          graphics[level] = [];\r\n        }\r\n\r\n        // 计算每列的标题位置（假设每列的节点宽度一致）\r\n        const leftPosition = level * (nodeWidth + 20); // 适当的水平偏移量，确保色块和标题对齐\r\n\r\n        // 添加色块\r\n        graphics[level].push({\r\n          type: \"rect\",\r\n          left: `${leftPosition}%`, // 设置为百分比，确保色块位置相对准确\r\n          top: \"3%\",\r\n          shape: {\r\n            width: 20,\r\n            height: 20,\r\n          },\r\n          style: {\r\n            fill: this.getColumnColor(level),\r\n          },\r\n        });\r\n\r\n        // 添加标题\r\n        graphics[level].push({\r\n          type: \"text\",\r\n          left: `${leftPosition}%`,\r\n          top: \"10%\",\r\n          style: {\r\n            text: this.getColumnTitle(level),\r\n            fontSize: 16,\r\n            fontWeight: \"bold\",\r\n          },\r\n        });\r\n      });\r\n\r\n      return graphics.flat(); // 将图形数组扁平化\r\n    },\r\n\r\n    // 获取每列的颜色\r\n    getColumnColor(level) {\r\n      const colors = [\"#e1d5e7\", \"#d5e8d4\", \"#dae8fc\", \"#ffe6cc\"];\r\n      return colors[level] || \"#ffffff\"; // 如果没有匹配颜色，使用白色\r\n    },\r\n\r\n    // 获取每列的标题\r\n    getColumnTitle(level) {\r\n      const titles = [\"第一列\", \"第二列\", \"第三列\", \"第四列\"];\r\n      return titles[level] || `列 ${level + 1}`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.SangJiTu {\r\n  width: 100%;\r\n  text-align: center;\r\n}\r\n#SangJiTU {\r\n  width: 100%;\r\n  height: 700px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}